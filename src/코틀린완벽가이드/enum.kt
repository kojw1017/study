/*
    코틀린에선 Enum을 타입으로 마구마구 쓸수있다 그리고 제너릭에 넣을 수 있따
 */
/*
 1. 이넘클래스란 무엇인가 이넘 클래스에는 어떤 내장된 연산들이 있는가
    상수를 모아둔 클래스(특정 타입에 속하는 미리정해진 전역 상수)
    전역 상수로 사용할 수 있는 방법이 없는 위치에서는 정의할 수 없다(내부 클래스나 함수 본문)

    내장된 연산 ordinal과 name이라는 프로퍼티가 들어가있고
    ordinal은 이넘값 순서에 따른 인덱스이고 name은 이넘값의 이름을 반환해준다
    이넘값에 대한 비교는 ordinal이 반환해주는 인텍스 값에 의해 정의된다

    values() 이넘값이 들어있는 배열을 반환  valueOf 이넘값이름을 넘기면 해당하는 이름을 돌려주거나 없으면 예외처리 해준다

    자바 스크립트에선 enum이 오브젝트로 변형된다
    when을 쓸때 else를 쓰지 않아도 되지만

    시스템에서 인스턴스를 만들어 두는 객체
    클래스를 만드는것에대한 의미는 인스턴스를 여러개 만들겠다는 의미(인스턴스를 몇개 만들지 모를때)
    인스턴스를 확정지어서 만들때 우리가 만들지말고 우리가 만들수없게 할 수 있는 클래스

    스태틱 보다 먼저 이넘이 태어난다 이넘은 스태틱을 참고 할 수 없다

    확정되어있는 숫자의 인스턴스를 만들어 주는 클래스스

 . when 식에서 이넘 클래스를 사용하는 경우 자세히 설명
    when 식에서 모든 이넘 상수를 다룬경우 else를 생략해도 된다
    else를 사용하지않고 when식을 쓸 경우에 새로운 이넘을 추가하면 컴파일러가 새로운 이넘이 분기처리되지 않았다고 경고해 주기 때문에 오류를 방지할 수있다
    이넘상수를 임포트하면 짧은 이름으로 이넘 상수를 사용할 수있다

 3. 커스텀 함수나 프로퍼티가 있는 이넘 클래스를 어떻게 정의하는가
    이넘 클래스도 일반 클래스처럼 사용할 수있다 이넘클래스에 정의된 멤버는 반드시 이넘 상수 목록 뒤에 나와야하고 상수 목록 뒤에는 세미콜론을붙여 상수목록과 멤버를 구분한다
    생성자가 있을경우 상수정의뒤에도 생성자 호출을 추가해 줘야한다

    상수에도 본문이 포함될 수 있지만 본문에 정의된 멤버를 다른 부분에서 접근할 수는 없다

 4.데이터 클래스란 무엇인가 데이터 클래서에 대해 컴파일러가 자동으로 생성해주는 연산은 어떤게 있나,
   어떻게 데이터 클래스의 인스턴스를 복사할 수 있는가

   데이터를 담아서 계층간으로 전달하는 객체
   필드, getter/setter, 생성자, toString, equals, hashCode, copy
   데이터 클래스 비교:주생성자의 정의된 프로퍼티의 값에 따라 결정된다 data를 없애면 객체의 정체성(메모리 주소가 같은지)에 따라 동등한지 비교한다
   copy함수를써서 현재 인스턴스를 복사하면서 프로퍼티도 변경할 수 있다

   객체지향 - 레퍼런스기반 : 포인터로 같은지를 판별
   함수형 - 값기반 : 불변이고 다른 변수에 할당하면 새로 만들어져 복사된다(메모리에 들어있는 값으로 같은지를 판별)
   객체지만 불변객체는 값지향

5. 구조분해 선언이란 무엇인가 어떤 용도로 사용하는가
    괄호로 감싸 여러 변수를 한꺼번에 정의할수 있게 해주는 구문이다
    각 이름은 별도의 변수 선언과 같고 변수의 값은 데이터 클래스의 인스턴스 프로퍼티해당한다
    어떤 프로퍼티가 매핑되는지는 프로퍼티의 위치에 따라 결정된다

    필요시 변수의 타입을 표기할 수 있고
    프로퍼티보다 적은 수의 변수를 선언할시 선언한 변수의 위치에 맞는 프로퍼티만 추출 된다
    프로퍼티를 생략하여 추출하고 싶으면 사용하지 않는 값은 _를 쓸 수있고

    불변 가변가능 괄호안에 한번에 정의해야 하므로 둘을 섞어서 사용할 수 없다
    for 루프에서도 사용가능
    람다 파라미터에도 사용가능
    구조분해 안에 다른 구조분해 내포 불가가

    일반 클래스는 5개까지
    함수가 여러값을 반환할때 사용하면 유용하다
    2개나 3개면 Pair나 Triple을 쓰고 4개이상부터는 데이터클래스만들어서 구조분해 쓰면 된다

 6. 인라인 클래스의 목적, 인라인으로 선언하기 위해 필요한 요구 사항
    인라인 클래스의 주생성자에는 불변 프로퍼티 하나만 선언 가능
    런타임에서 객체를 생성하지 않고 이 프로퍼티 값으로 표현됨

    자체 함수와 프로퍼티 포함할 수 있지만 코틀린 컴퍼일러는 오직 하나의 프로퍼티만 인라인을 지원하기 때문에 프로퍼티는 상태를 가질 수 없고
    명시적인 접근자만 허용가능 하다 가변으로 프로퍼티 정의할 수 있지만 인라인 클래스 내부에는 가변상태가 없업서 의미가 없다

 7. 부호 없는 타입과 이런 타입이 제공하는 내장 연산에 대해 설명
    부호가 있는 정수와 비교할 때 부호가 없는 정수 타입의 특징

    부호없는타입 표현시 소문자나 대문자 u사용 변수 타입 미지정시 크기에 따라 uInt 또는  uLong으로 결정됨
    부호가 있는 타입과 없는 타입은 서로 호환하지 않는다

    증가, 감소, 복합 대입 연산자와 비트연산지원 부호없는 타입을 만들어진 배열도 만들수있다
    범위와 진행 타입에도 ..연산자와 until downTo 사용 가능능

    음이 아닌 정수 연산을 처리하는데 유용하다다
    인스턴스를 값을 판별하는것
*/
enum class App(val a:Int, block:(App)->Unit = {}){
    A(3, {it.b = 5});
    var b = 0
    var c = 0
}
class DataRef(val a:Int)
fun main(){
    var d1 = DataRef(1)
    var d2 = DataRef(1)
    println(d1 == d2)
}
